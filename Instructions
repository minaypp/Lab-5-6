Homebrew Card Game

For this lab, you will be joining with a new group to create a homebrewed card game of your own in the style of games like
Magic: The Gathering and Hearthstone. This card game will familiarize you with the use of inheritance and polymorphism in python,
as well as implementing a linked list data structure.

 

The Card Game

The card game will consist of two players, each with a deck of at least 25 cards, taking turns playing cards until they have reduced their
opponent's HP to 0 at which point they win. Each player will draw a hand of cards at the start of the game, and continue drawing at the start of their turn.

The deck of cards will be implemented as a linked list and consist of two major card types: Unit Cards and Spell Cards. 
All cards will posses a name, description, and some cost of resource which prevents a player from playing all of their hand at once (at least at the start of the game).

Additionally, Unit cards will have an Attack and HP stat
Before the end of each round, the player can choose to attack with their played units. Their opponent can defend with their own units,
but defending units cannot attack the next turnSpell cards will have some effect that changes the game state. 
This can be instant damage, health regeneration, or altering unit stats
 

Extra Requirements

A log keeping track of all actions taken in the game should be displayed
An AI opponent is not required, you can assume the computer will be passed back and forth while playing the game.
 

Rubric

Game Code (35%) - Create a deck via a linked list that holds both Unit and Spell Cards.
Testing and Debugging (10%) - Thorough testing with a variety of test cases, code doesn't crash with unexpected input.
Commenting and Structure (10%) - Code is well-organized, with meaningful variable names, professional comments, and clear logic flow.
Demo and Oral Questions (35%) - Once your code is complete, you will demo the working code to me during lab time and each member of the lab group will be asked questions to ensure they understand how their code functions.
Planning Write Up (10%) - UML diagram and division of labor documentation
